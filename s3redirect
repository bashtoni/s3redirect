#!/usr/bin/python

import sys
import argparse

def open_conf():
    import ConfigParser
    global parser
    parser = ConfigParser.SafeConfigParser()
    try:
        open('.s3redirect')
    except IOError:
        print 'Could Not Open File'
        sys.exit(0)
    else:
        parser.read('.s3redirect')
        try:
            global AWS_ACCESS_KEY_ID
            global AWS_SECRET_ACCESS_KEY
            global bucket_name
            AWS_ACCESS_KEY_ID = parser.get(config, 'AWS_ACCESS_KEY_ID')
            AWS_SECRET_ACCESS_KEY = parser.get(config, 'AWS_SECRET_ACCESS_KEY')
            bucket_name = parser.get(config, 'bucket_name')
        except:
            print 'Could not parse config file'
            sys.exit(0)
        else:
            global cloudfront_id
            try:
                cloudfront_id = parser.get(config, 'cloudfront_id')
            except:
                cloudfront_id = None
            connect_s3()

def help_message():
    '''Function to display a help message'''
    print '''Usage: ./s3redirect -r REDIRECT -u http://www.example.com
    Start Options:
    -h -- Displays this help message
    -r -- Specify the zone file to convert
    -u -- Specify the URL to redirect too (*Required with -r flag*)
    -c -- Specify alternative config block (default s3redirect)
    -d -- Delete a redirect
    -p -- Create Production URL's with upper and lower case versions (default true)'''
    sys.exit(0)

def get_args():
    '''Get the command line args and pass them into a dictionary'''
    parser = argparse.ArgumentParser(description='Usage: ./s3redirect -r REDIRECT -u http://www.example.com')
    parser.add_argument('-c','--config', help='Use alternative config block', required=False)
    parser.add_argument('-r','--redirect', help='Redirect argument to create on S3', required=False)
    parser.add_argument('-d','--delete', help='Delete Redirect from S3', required=False)
    parser.add_argument('-u','--url', help='The URL you wish to redirect to', required=False)
    parser.add_argument('-p','--production', help='Create Production upper and lower case redirects', required=False)
    args = vars(parser.parse_args())
    global remove
    
    if args['delete']:
        global delete
        delete = args['delete']
        remove = True
    else:
        global url
        global redirect
        if args['url'] !=  None:
            url = args['url']
        else:
            print 'Error Missing argument -u'
            help_message()
        if args['redirect'] != None:
            redirect = args['redirect']
        else:
            print 'Error Missing argument -r'
            help_message()
        remove = False

    global production
    if args['production'] == 'False' or args['production'] == 'FALSE':
        production = False
    else:
        production = True

    global config
    if args['config']:
        config = args['config']
    else:
        config = 's3redirect'
    open_conf()

def query_yes_no(question, default="no"):
    """Ask a yes/no question via raw_input() and return their answer.

    "question" is a string that is presented to the user.
    "default" is the presumed answer if the user just hits <Enter>.
        It must be "yes" (the default), "no" or None (meaning
        an answer is required of the user).

    The "answer" return value is one of "yes" or "no".
    """
    valid = {"yes":True,   "y":True,  "ye":True,
             "no":False,     "n":False}
    if default == None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    else:
        raise ValueError("invalid default answer: '%s'" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "\
                             "(or 'y' or 'n').\n")

def delete_redirect(s3delete):
    '''Function to delete objects from S3'''
    k.key = s3delete
    if k.exists():
        current = k.get_redirect()
        print 'Redirect for %s currently points to location %s' % \
                (s3delete, current)
        question = "Do you really wish to delete?"
        choice = query_yes_no(question, default="no")
        if choice:
            k.delete()
            print 'Deleting redirect %s in Amazon S3 bucket %s' % \
                    (s3delete, bucket_name)
        else:
            print ("Not Deleting")
            sys.exit(0)
    else:
        print 'Redirect does not exist %s' % \
                (s3delete)

def create_redirect(redirect):
    '''Create new object in S3 and set website redirect meta-data _ set public'''
    print 'Creating Redirect %s in Amazon S3 bucket %s to %s' % \
        (redirect, bucket_name, url)
    k.key = redirect
    k.set_contents_from_string(redirect)
    try:
        k.set_redirect(url)
    except:
        k.delete()
        print 'Error creating redirect, be sure to include http(s):// in the URL'
        sys.exit(0)
    k.set_acl('public-read')

def invalidate(path):
    '''Invalidate a path in cloudfront'''
    import boto
    if cloudfront_id != None:
        c = boto.connect_cloudfront(AWS_ACCESS_KEY_ID,
                    AWS_SECRET_ACCESS_KEY)
        c.create_invalidation_request(cloudfront_id, path)
        print 'Invalidating old redirect %s in Cloudfront distro %s' % (path, cloudfront_id)

def connect_s3():
    '''Functon needs spliting out connects to S3 then calls logic for other function'''
    import boto    
    conn = boto.connect_s3(AWS_ACCESS_KEY_ID,
                AWS_SECRET_ACCESS_KEY)

    import boto.s3
    bucket = conn.get_bucket(bucket_name)

    def percent_cb(complete, total):
        sys.stdout.write('.')
        sys.stdout.flush()
    
    from boto.s3.key import Key
    global k
    k = Key(bucket)
    
    if remove == True:
        k.key = delete
        if production == True:
            orig = delete
            upper = delete.upper()
            lower = delete.lower()
            if orig == upper or orig == lower:
                delete_redirect(upper)
                delete_redirect(lower)
                create_redirect(lower)
                inval = ['/'+upper,'/'+lower]
                invalidate(inval)
            else:
                delete_redirect(upper)
                delete_redirect(lower)
                delete_redirect(orig)
                inval = ['/'+upper,'/'+lower,'/'+orig]
                invalidate(inval)
        else:
            delete_redirect(delete)
            invalidate('/'+delete)
    else:
        k.key = redirect
        try:
            k.get_contents_as_string()
        except:
            if production == True:
                orig = redirect
                upper = redirect.upper()                
                lower = redirect.lower()
                if orig == upper or orig == lower:
                    create_redirect(upper)
                    create_redirect(lower)
                else:
                    create_redirect(upper)
                    create_redirect(lower)
                    create_redirect(orig)
            else:
                create_redirect(redirect)
        else:
            current = k.get_redirect()
            print 'Redirect for %s already exists to location %s' % \
                (redirect, current)
            question = "Do you wish to continue?"  
            choice = query_yes_no(question, default="no")  
            if choice:  
                print 'Updating current redirect %s in Amazon S3 bucket %s to %s' % \
                    (redirect, bucket_name, url)
                if production == True:
                    orig = redirect
                    upper = redirect.upper()                
                    lower = redirect.lower()
                    if orig == upper or orig == lower:
                        create_redirect(upper)
                        create_redirect(lower)
                        inval = ['/'+upper,'/'+lower]
                        invalidate(inval)
                    else:
                        create_redirect(upper)
                        create_redirect(lower)
                        create_redirect(orig)
                        inval = ['/'+upper,'/'+lower,'/'+orig]
                        invalidate(inval)
                else:
                    create_redirect(redirect)
                    invalidate('/'+redirect)
            else:     
                print ("Not updating")
                sys.exit(0) 


get_args()
